/*
 * generated by Xtext 2.12.0
 */
package algorithms.complexities.ide.contentassist.antlr;

import algorithms.complexities.ide.contentassist.antlr.internal.InternalComplexitiesParser;
import algorithms.complexities.services.ComplexitiesGrammarAccess;
import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ComplexitiesParser extends AbstractContentAssistParser {

	@Inject
	private ComplexitiesGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalComplexitiesParser createParser() {
		InternalComplexitiesParser result = new InternalComplexitiesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCalculationAccess().getAlternatives(), "rule__Calculation__Alternatives");
					put(grammarAccess.getComplexityAccess().getAlternatives_2(), "rule__Complexity__Alternatives_2");
					put(grammarAccess.getTimeUnitsAccess().getAlternatives(), "rule__TimeUnits__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getExecutionTimesAccess().getGroup(), "rule__ExecutionTimes__Group__0");
					put(grammarAccess.getSizesAccess().getGroup(), "rule__Sizes__Group__0");
					put(grammarAccess.getComplexityAccess().getGroup(), "rule__Complexity__Group__0");
					put(grammarAccess.getModelAccess().getCalculationsAssignment_1(), "rule__Model__CalculationsAssignment_1");
					put(grammarAccess.getExecutionTimesAccess().getComplexityAssignment_3(), "rule__ExecutionTimes__ComplexityAssignment_3");
					put(grammarAccess.getExecutionTimesAccess().getTime1Assignment_7(), "rule__ExecutionTimes__Time1Assignment_7");
					put(grammarAccess.getExecutionTimesAccess().getTime1UnitAssignment_8(), "rule__ExecutionTimes__Time1UnitAssignment_8");
					put(grammarAccess.getExecutionTimesAccess().getSize1Assignment_12(), "rule__ExecutionTimes__Size1Assignment_12");
					put(grammarAccess.getExecutionTimesAccess().getTime2UnitAssignment_16(), "rule__ExecutionTimes__Time2UnitAssignment_16");
					put(grammarAccess.getExecutionTimesAccess().getSize2Assignment_20(), "rule__ExecutionTimes__Size2Assignment_20");
					put(grammarAccess.getSizesAccess().getComplexityAssignment_3(), "rule__Sizes__ComplexityAssignment_3");
					put(grammarAccess.getSizesAccess().getSize1Assignment_7(), "rule__Sizes__Size1Assignment_7");
					put(grammarAccess.getSizesAccess().getTime1Assignment_11(), "rule__Sizes__Time1Assignment_11");
					put(grammarAccess.getSizesAccess().getTime1UnitAssignment_12(), "rule__Sizes__Time1UnitAssignment_12");
					put(grammarAccess.getSizesAccess().getTime2Assignment_18(), "rule__Sizes__Time2Assignment_18");
					put(grammarAccess.getSizesAccess().getTime2UnitAssignment_19(), "rule__Sizes__Time2UnitAssignment_19");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ComplexitiesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ComplexitiesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
