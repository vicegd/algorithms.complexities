/*
 * generated by Xtext 2.12.0
 */
package algorithms.complexities.serializer;

import algorithms.complexities.complexities.ComplexitiesPackage;
import algorithms.complexities.complexities.ExecutionTimes;
import algorithms.complexities.complexities.Model;
import algorithms.complexities.complexities.Sizes;
import algorithms.complexities.services.ComplexitiesGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ComplexitiesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ComplexitiesGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ComplexitiesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ComplexitiesPackage.EXECUTION_TIMES:
				sequence_ExecutionTimes(context, (ExecutionTimes) semanticObject); 
				return; 
			case ComplexitiesPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case ComplexitiesPackage.SIZES:
				sequence_Sizes(context, (Sizes) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Calculation returns ExecutionTimes
	 *     ExecutionTimes returns ExecutionTimes
	 *
	 * Constraint:
	 *     (
	 *         complexity=Complexity 
	 *         time1=INT 
	 *         time1Unit=TimeUnits 
	 *         size1=INT 
	 *         time2Unit=TimeUnits 
	 *         size2=INT
	 *     )
	 */
	protected void sequence_ExecutionTimes(ISerializationContext context, ExecutionTimes semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComplexitiesPackage.Literals.CALCULATION__COMPLEXITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComplexitiesPackage.Literals.CALCULATION__COMPLEXITY));
			if (transientValues.isValueTransient(semanticObject, ComplexitiesPackage.Literals.CALCULATION__TIME1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComplexitiesPackage.Literals.CALCULATION__TIME1));
			if (transientValues.isValueTransient(semanticObject, ComplexitiesPackage.Literals.CALCULATION__TIME1_UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComplexitiesPackage.Literals.CALCULATION__TIME1_UNIT));
			if (transientValues.isValueTransient(semanticObject, ComplexitiesPackage.Literals.CALCULATION__SIZE1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComplexitiesPackage.Literals.CALCULATION__SIZE1));
			if (transientValues.isValueTransient(semanticObject, ComplexitiesPackage.Literals.CALCULATION__TIME2_UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComplexitiesPackage.Literals.CALCULATION__TIME2_UNIT));
			if (transientValues.isValueTransient(semanticObject, ComplexitiesPackage.Literals.EXECUTION_TIMES__SIZE2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComplexitiesPackage.Literals.EXECUTION_TIMES__SIZE2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExecutionTimesAccess().getComplexityComplexityParserRuleCall_3_0(), semanticObject.getComplexity());
		feeder.accept(grammarAccess.getExecutionTimesAccess().getTime1INTTerminalRuleCall_7_0(), semanticObject.getTime1());
		feeder.accept(grammarAccess.getExecutionTimesAccess().getTime1UnitTimeUnitsEnumRuleCall_8_0(), semanticObject.getTime1Unit());
		feeder.accept(grammarAccess.getExecutionTimesAccess().getSize1INTTerminalRuleCall_12_0(), semanticObject.getSize1());
		feeder.accept(grammarAccess.getExecutionTimesAccess().getTime2UnitTimeUnitsEnumRuleCall_16_0(), semanticObject.getTime2Unit());
		feeder.accept(grammarAccess.getExecutionTimesAccess().getSize2INTTerminalRuleCall_20_0(), semanticObject.getSize2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     calculations+=Calculation+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Calculation returns Sizes
	 *     Sizes returns Sizes
	 *
	 * Constraint:
	 *     (
	 *         complexity=Complexity 
	 *         size1=INT 
	 *         time1=INT 
	 *         time1Unit=TimeUnits 
	 *         time2=INT 
	 *         time2Unit=TimeUnits
	 *     )
	 */
	protected void sequence_Sizes(ISerializationContext context, Sizes semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComplexitiesPackage.Literals.CALCULATION__COMPLEXITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComplexitiesPackage.Literals.CALCULATION__COMPLEXITY));
			if (transientValues.isValueTransient(semanticObject, ComplexitiesPackage.Literals.CALCULATION__SIZE1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComplexitiesPackage.Literals.CALCULATION__SIZE1));
			if (transientValues.isValueTransient(semanticObject, ComplexitiesPackage.Literals.CALCULATION__TIME1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComplexitiesPackage.Literals.CALCULATION__TIME1));
			if (transientValues.isValueTransient(semanticObject, ComplexitiesPackage.Literals.CALCULATION__TIME1_UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComplexitiesPackage.Literals.CALCULATION__TIME1_UNIT));
			if (transientValues.isValueTransient(semanticObject, ComplexitiesPackage.Literals.SIZES__TIME2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComplexitiesPackage.Literals.SIZES__TIME2));
			if (transientValues.isValueTransient(semanticObject, ComplexitiesPackage.Literals.CALCULATION__TIME2_UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComplexitiesPackage.Literals.CALCULATION__TIME2_UNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSizesAccess().getComplexityComplexityParserRuleCall_3_0(), semanticObject.getComplexity());
		feeder.accept(grammarAccess.getSizesAccess().getSize1INTTerminalRuleCall_7_0(), semanticObject.getSize1());
		feeder.accept(grammarAccess.getSizesAccess().getTime1INTTerminalRuleCall_11_0(), semanticObject.getTime1());
		feeder.accept(grammarAccess.getSizesAccess().getTime1UnitTimeUnitsEnumRuleCall_12_0(), semanticObject.getTime1Unit());
		feeder.accept(grammarAccess.getSizesAccess().getTime2INTTerminalRuleCall_18_0(), semanticObject.getTime2());
		feeder.accept(grammarAccess.getSizesAccess().getTime2UnitTimeUnitsEnumRuleCall_19_0(), semanticObject.getTime2Unit());
		feeder.finish();
	}
	
	
}
