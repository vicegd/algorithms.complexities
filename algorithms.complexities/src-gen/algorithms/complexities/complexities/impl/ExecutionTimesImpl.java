/**
 * generated by Xtext 2.12.0
 */
package algorithms.complexities.complexities.impl;

import algorithms.complexities.complexities.ComplexitiesPackage;
import algorithms.complexities.complexities.ExecutionTimes;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Execution Times</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link algorithms.complexities.complexities.impl.ExecutionTimesImpl#getSize2 <em>Size2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExecutionTimesImpl extends CalculationImpl implements ExecutionTimes
{
  /**
   * The default value of the '{@link #getSize2() <em>Size2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize2()
   * @generated
   * @ordered
   */
  protected static final int SIZE2_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getSize2() <em>Size2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize2()
   * @generated
   * @ordered
   */
  protected int size2 = SIZE2_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExecutionTimesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ComplexitiesPackage.Literals.EXECUTION_TIMES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getSize2()
  {
    return size2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSize2(int newSize2)
  {
    int oldSize2 = size2;
    size2 = newSize2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComplexitiesPackage.EXECUTION_TIMES__SIZE2, oldSize2, size2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ComplexitiesPackage.EXECUTION_TIMES__SIZE2:
        return getSize2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ComplexitiesPackage.EXECUTION_TIMES__SIZE2:
        setSize2((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ComplexitiesPackage.EXECUTION_TIMES__SIZE2:
        setSize2(SIZE2_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ComplexitiesPackage.EXECUTION_TIMES__SIZE2:
        return size2 != SIZE2_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (size2: ");
    result.append(size2);
    result.append(')');
    return result.toString();
  }

} //ExecutionTimesImpl
