/*
 * generated by Xtext 2.12.0
 */
grammar InternalComplexities;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package algorithms.complexities.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package algorithms.complexities.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import algorithms.complexities.services.ComplexitiesGrammarAccess;

}

@parser::members {

 	private ComplexitiesGrammarAccess grammarAccess;

    public InternalComplexitiesParser(TokenStream input, ComplexitiesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ComplexitiesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='calculations'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getCalculationsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getCalculationsCalculationParserRuleCall_1_0());
				}
				lv_calculations_1_0=ruleCalculation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"calculations",
						lv_calculations_1_0,
						"algorithms.complexities.Complexities.Calculation");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleCalculation
entryRuleCalculation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCalculationRule()); }
	iv_ruleCalculation=ruleCalculation
	{ $current=$iv_ruleCalculation.current; }
	EOF;

// Rule Calculation
ruleCalculation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCalculationAccess().getExecutionTimesParserRuleCall_0());
		}
		this_ExecutionTimes_0=ruleExecutionTimes
		{
			$current = $this_ExecutionTimes_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCalculationAccess().getSizesParserRuleCall_1());
		}
		this_Sizes_1=ruleSizes
		{
			$current = $this_Sizes_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExecutionTimes
entryRuleExecutionTimes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExecutionTimesRule()); }
	iv_ruleExecutionTimes=ruleExecutionTimes
	{ $current=$iv_ruleExecutionTimes.current; }
	EOF;

// Rule ExecutionTimes
ruleExecutionTimes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='with'
		{
			newLeafNode(otherlv_0, grammarAccess.getExecutionTimesAccess().getWithKeyword_0());
		}
		otherlv_1='a'
		{
			newLeafNode(otherlv_1, grammarAccess.getExecutionTimesAccess().getAKeyword_1());
		}
		otherlv_2='complexity'
		{
			newLeafNode(otherlv_2, grammarAccess.getExecutionTimesAccess().getComplexityKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExecutionTimesAccess().getComplexityComplexityParserRuleCall_3_0());
				}
				lv_complexity_3_0=ruleComplexity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExecutionTimesRule());
					}
					set(
						$current,
						"complexity",
						lv_complexity_3_0,
						"algorithms.complexities.Complexities.Complexity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='if'
		{
			newLeafNode(otherlv_4, grammarAccess.getExecutionTimesAccess().getIfKeyword_4());
		}
		otherlv_5='time'
		{
			newLeafNode(otherlv_5, grammarAccess.getExecutionTimesAccess().getTimeKeyword_5());
		}
		otherlv_6='='
		{
			newLeafNode(otherlv_6, grammarAccess.getExecutionTimesAccess().getEqualsSignKeyword_6());
		}
		(
			(
				lv_time1_7_0=RULE_INT
				{
					newLeafNode(lv_time1_7_0, grammarAccess.getExecutionTimesAccess().getTime1INTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExecutionTimesRule());
					}
					setWithLastConsumed(
						$current,
						"time1",
						lv_time1_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExecutionTimesAccess().getTime1UnitTimeUnitsEnumRuleCall_8_0());
				}
				lv_time1Unit_8_0=ruleTimeUnits
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExecutionTimesRule());
					}
					set(
						$current,
						"time1Unit",
						lv_time1Unit_8_0,
						"algorithms.complexities.Complexities.TimeUnits");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='for'
		{
			newLeafNode(otherlv_9, grammarAccess.getExecutionTimesAccess().getForKeyword_9());
		}
		otherlv_10='size'
		{
			newLeafNode(otherlv_10, grammarAccess.getExecutionTimesAccess().getSizeKeyword_10());
		}
		otherlv_11='='
		{
			newLeafNode(otherlv_11, grammarAccess.getExecutionTimesAccess().getEqualsSignKeyword_11());
		}
		(
			(
				lv_size1_12_0=RULE_INT
				{
					newLeafNode(lv_size1_12_0, grammarAccess.getExecutionTimesAccess().getSize1INTTerminalRuleCall_12_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExecutionTimesRule());
					}
					setWithLastConsumed(
						$current,
						"size1",
						lv_size1_12_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_13='calculate'
		{
			newLeafNode(otherlv_13, grammarAccess.getExecutionTimesAccess().getCalculateKeyword_13());
		}
		otherlv_14='time'
		{
			newLeafNode(otherlv_14, grammarAccess.getExecutionTimesAccess().getTimeKeyword_14());
		}
		otherlv_15='in'
		{
			newLeafNode(otherlv_15, grammarAccess.getExecutionTimesAccess().getInKeyword_15());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExecutionTimesAccess().getTime2UnitTimeUnitsEnumRuleCall_16_0());
				}
				lv_time2Unit_16_0=ruleTimeUnits
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExecutionTimesRule());
					}
					set(
						$current,
						"time2Unit",
						lv_time2Unit_16_0,
						"algorithms.complexities.Complexities.TimeUnits");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_17='for'
		{
			newLeafNode(otherlv_17, grammarAccess.getExecutionTimesAccess().getForKeyword_17());
		}
		otherlv_18='size'
		{
			newLeafNode(otherlv_18, grammarAccess.getExecutionTimesAccess().getSizeKeyword_18());
		}
		otherlv_19='='
		{
			newLeafNode(otherlv_19, grammarAccess.getExecutionTimesAccess().getEqualsSignKeyword_19());
		}
		(
			(
				lv_size2_20_0=RULE_INT
				{
					newLeafNode(lv_size2_20_0, grammarAccess.getExecutionTimesAccess().getSize2INTTerminalRuleCall_20_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExecutionTimesRule());
					}
					setWithLastConsumed(
						$current,
						"size2",
						lv_size2_20_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleSizes
entryRuleSizes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSizesRule()); }
	iv_ruleSizes=ruleSizes
	{ $current=$iv_ruleSizes.current; }
	EOF;

// Rule Sizes
ruleSizes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='with'
		{
			newLeafNode(otherlv_0, grammarAccess.getSizesAccess().getWithKeyword_0());
		}
		otherlv_1='a'
		{
			newLeafNode(otherlv_1, grammarAccess.getSizesAccess().getAKeyword_1());
		}
		otherlv_2='complexity'
		{
			newLeafNode(otherlv_2, grammarAccess.getSizesAccess().getComplexityKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSizesAccess().getComplexityComplexityParserRuleCall_3_0());
				}
				lv_complexity_3_0=ruleComplexity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSizesRule());
					}
					set(
						$current,
						"complexity",
						lv_complexity_3_0,
						"algorithms.complexities.Complexities.Complexity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='if'
		{
			newLeafNode(otherlv_4, grammarAccess.getSizesAccess().getIfKeyword_4());
		}
		otherlv_5='size'
		{
			newLeafNode(otherlv_5, grammarAccess.getSizesAccess().getSizeKeyword_5());
		}
		otherlv_6='='
		{
			newLeafNode(otherlv_6, grammarAccess.getSizesAccess().getEqualsSignKeyword_6());
		}
		(
			(
				lv_size1_7_0=RULE_INT
				{
					newLeafNode(lv_size1_7_0, grammarAccess.getSizesAccess().getSize1INTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSizesRule());
					}
					setWithLastConsumed(
						$current,
						"size1",
						lv_size1_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_8='for'
		{
			newLeafNode(otherlv_8, grammarAccess.getSizesAccess().getForKeyword_8());
		}
		otherlv_9='time'
		{
			newLeafNode(otherlv_9, grammarAccess.getSizesAccess().getTimeKeyword_9());
		}
		otherlv_10='='
		{
			newLeafNode(otherlv_10, grammarAccess.getSizesAccess().getEqualsSignKeyword_10());
		}
		(
			(
				lv_time1_11_0=RULE_INT
				{
					newLeafNode(lv_time1_11_0, grammarAccess.getSizesAccess().getTime1INTTerminalRuleCall_11_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSizesRule());
					}
					setWithLastConsumed(
						$current,
						"time1",
						lv_time1_11_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSizesAccess().getTime1UnitTimeUnitsEnumRuleCall_12_0());
				}
				lv_time1Unit_12_0=ruleTimeUnits
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSizesRule());
					}
					set(
						$current,
						"time1Unit",
						lv_time1Unit_12_0,
						"algorithms.complexities.Complexities.TimeUnits");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_13='calculate'
		{
			newLeafNode(otherlv_13, grammarAccess.getSizesAccess().getCalculateKeyword_13());
		}
		otherlv_14='size'
		{
			newLeafNode(otherlv_14, grammarAccess.getSizesAccess().getSizeKeyword_14());
		}
		otherlv_15='with'
		{
			newLeafNode(otherlv_15, grammarAccess.getSizesAccess().getWithKeyword_15());
		}
		otherlv_16='time'
		{
			newLeafNode(otherlv_16, grammarAccess.getSizesAccess().getTimeKeyword_16());
		}
		otherlv_17='='
		{
			newLeafNode(otherlv_17, grammarAccess.getSizesAccess().getEqualsSignKeyword_17());
		}
		(
			(
				lv_time2_18_0=RULE_INT
				{
					newLeafNode(lv_time2_18_0, grammarAccess.getSizesAccess().getTime2INTTerminalRuleCall_18_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSizesRule());
					}
					setWithLastConsumed(
						$current,
						"time2",
						lv_time2_18_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSizesAccess().getTime2UnitTimeUnitsEnumRuleCall_19_0());
				}
				lv_time2Unit_19_0=ruleTimeUnits
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSizesRule());
					}
					set(
						$current,
						"time2Unit",
						lv_time2Unit_19_0,
						"algorithms.complexities.Complexities.TimeUnits");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleComplexity
entryRuleComplexity returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComplexityRule()); }
	iv_ruleComplexity=ruleComplexity
	{ $current=$iv_ruleComplexity.current.getText(); }
	EOF;

// Rule Complexity
ruleComplexity returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='O'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComplexityAccess().getOKeyword_0());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComplexityAccess().getLeftParenthesisKeyword_1());
		}
		(
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getComplexityAccess().getINTTerminalRuleCall_2_0());
			}
			    |
			this_LINEAR_3=RULE_LINEAR
			{
				$current.merge(this_LINEAR_3);
			}
			{
				newLeafNode(this_LINEAR_3, grammarAccess.getComplexityAccess().getLINEARTerminalRuleCall_2_1());
			}
			    |
			this_EXPONENTIAL_4=RULE_EXPONENTIAL
			{
				$current.merge(this_EXPONENTIAL_4);
			}
			{
				newLeafNode(this_EXPONENTIAL_4, grammarAccess.getComplexityAccess().getEXPONENTIALTerminalRuleCall_2_2());
			}
			    |
			this_LOGARITHMIC_5=RULE_LOGARITHMIC
			{
				$current.merge(this_LOGARITHMIC_5);
			}
			{
				newLeafNode(this_LOGARITHMIC_5, grammarAccess.getComplexityAccess().getLOGARITHMICTerminalRuleCall_2_3());
			}
			    |
			this_LINLOG_6=RULE_LINLOG
			{
				$current.merge(this_LINLOG_6);
			}
			{
				newLeafNode(this_LINLOG_6, grammarAccess.getComplexityAccess().getLINLOGTerminalRuleCall_2_4());
			}
			    |
			this_LINLOGEXP_7=RULE_LINLOGEXP
			{
				$current.merge(this_LINLOGEXP_7);
			}
			{
				newLeafNode(this_LINLOGEXP_7, grammarAccess.getComplexityAccess().getLINLOGEXPTerminalRuleCall_2_5());
			}
			    |
			this_POWER_8=RULE_POWER
			{
				$current.merge(this_POWER_8);
			}
			{
				newLeafNode(this_POWER_8, grammarAccess.getComplexityAccess().getPOWERTerminalRuleCall_2_6());
			}
			    |
			this_FACTORIAL_9=RULE_FACTORIAL
			{
				$current.merge(this_FACTORIAL_9);
			}
			{
				newLeafNode(this_FACTORIAL_9, grammarAccess.getComplexityAccess().getFACTORIALTerminalRuleCall_2_7());
			}
		)
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComplexityAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Rule TimeUnits
ruleTimeUnits returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='seconds'
			{
				$current = grammarAccess.getTimeUnitsAccess().getSecondsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTimeUnitsAccess().getSecondsEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='minutes'
			{
				$current = grammarAccess.getTimeUnitsAccess().getMinutesEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTimeUnitsAccess().getMinutesEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='hours'
			{
				$current = grammarAccess.getTimeUnitsAccess().getHoursEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTimeUnitsAccess().getHoursEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='days'
			{
				$current = grammarAccess.getTimeUnitsAccess().getDaysEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTimeUnitsAccess().getDaysEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='weeks'
			{
				$current = grammarAccess.getTimeUnitsAccess().getWeeksEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getTimeUnitsAccess().getWeeksEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='months'
			{
				$current = grammarAccess.getTimeUnitsAccess().getMonthsEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getTimeUnitsAccess().getMonthsEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='years'
			{
				$current = grammarAccess.getTimeUnitsAccess().getYearsEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getTimeUnitsAccess().getYearsEnumLiteralDeclaration_6());
			}
		)
	)
;

RULE_LINEAR : 'n';

RULE_EXPONENTIAL : 'n^' ('1'..'9')+;

RULE_LOGARITHMIC : 'log' 'n';

RULE_LINLOG : 'n' 'log' 'n';

RULE_LINLOGEXP : 'n^' ('1'..'9')+ 'log^' ('1'..'9')+ ' '+ 'n';

RULE_POWER : ('1'..'9')+ '^' 'n';

RULE_FACTORIAL : 'n!';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
