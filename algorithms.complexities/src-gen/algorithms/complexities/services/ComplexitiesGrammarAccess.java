/*
 * generated by Xtext 2.12.0
 */
package algorithms.complexities.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ComplexitiesGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "algorithms.complexities.Complexities.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCalculationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCalculationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCalculationsCalculationParserRuleCall_1_0 = (RuleCall)cCalculationsAssignment_1.eContents().get(0);
		
		//Model: //'language' '=' language = LanguageCode
		//	'calculations' calculations+=Calculation+;
		@Override public ParserRule getRule() { return rule; }
		
		////'language' '=' language = LanguageCode
		//'calculations' calculations+=Calculation+
		public Group getGroup() { return cGroup; }
		
		////'language' '=' language = LanguageCode
		//'calculations'
		public Keyword getCalculationsKeyword_0() { return cCalculationsKeyword_0; }
		
		//calculations+=Calculation+
		public Assignment getCalculationsAssignment_1() { return cCalculationsAssignment_1; }
		
		//Calculation
		public RuleCall getCalculationsCalculationParserRuleCall_1_0() { return cCalculationsCalculationParserRuleCall_1_0; }
	}
	public class CalculationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "algorithms.complexities.Complexities.Calculation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExecutionTimesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSizesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Calculation:
		//	ExecutionTimes | Sizes;
		@Override public ParserRule getRule() { return rule; }
		
		//ExecutionTimes | Sizes
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExecutionTimes
		public RuleCall getExecutionTimesParserRuleCall_0() { return cExecutionTimesParserRuleCall_0; }
		
		//Sizes
		public RuleCall getSizesParserRuleCall_1() { return cSizesParserRuleCall_1; }
	}
	public class ExecutionTimesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "algorithms.complexities.Complexities.ExecutionTimes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cComplexityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComplexityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComplexityComplexityParserRuleCall_3_0 = (RuleCall)cComplexityAssignment_3.eContents().get(0);
		private final Keyword cIfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cTimeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTime1Assignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTime1INTTerminalRuleCall_7_0 = (RuleCall)cTime1Assignment_7.eContents().get(0);
		private final Assignment cTime1UnitAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTime1UnitTimeUnitsEnumRuleCall_8_0 = (RuleCall)cTime1UnitAssignment_8.eContents().get(0);
		private final Keyword cForKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cSizeKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cEqualsSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cSize1Assignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cSize1INTTerminalRuleCall_12_0 = (RuleCall)cSize1Assignment_12.eContents().get(0);
		private final Keyword cCalculateKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cTimeKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cInKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cTime2UnitAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cTime2UnitTimeUnitsEnumRuleCall_16_0 = (RuleCall)cTime2UnitAssignment_16.eContents().get(0);
		private final Keyword cForKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cSizeKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cEqualsSignKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Assignment cSize2Assignment_20 = (Assignment)cGroup.eContents().get(20);
		private final RuleCall cSize2INTTerminalRuleCall_20_0 = (RuleCall)cSize2Assignment_20.eContents().get(0);
		
		//ExecutionTimes:
		//	'with' 'a' 'complexity' complexity=Complexity
		//	'if' 'time' '=' time1=INT time1Unit=TimeUnits 'for' 'size' '=' size1=INT 'calculate' 'time' 'in' time2Unit=TimeUnits
		//	'for' 'size' '=' size2=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'with' 'a' 'complexity' complexity=Complexity 'if' 'time' '=' time1=INT time1Unit=TimeUnits 'for' 'size' '=' size1=INT
		//'calculate' 'time' 'in' time2Unit=TimeUnits 'for' 'size' '=' size2=INT
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//'a'
		public Keyword getAKeyword_1() { return cAKeyword_1; }
		
		//'complexity'
		public Keyword getComplexityKeyword_2() { return cComplexityKeyword_2; }
		
		//complexity=Complexity
		public Assignment getComplexityAssignment_3() { return cComplexityAssignment_3; }
		
		//Complexity
		public RuleCall getComplexityComplexityParserRuleCall_3_0() { return cComplexityComplexityParserRuleCall_3_0; }
		
		//'if'
		public Keyword getIfKeyword_4() { return cIfKeyword_4; }
		
		//'time'
		public Keyword getTimeKeyword_5() { return cTimeKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//time1=INT
		public Assignment getTime1Assignment_7() { return cTime1Assignment_7; }
		
		//INT
		public RuleCall getTime1INTTerminalRuleCall_7_0() { return cTime1INTTerminalRuleCall_7_0; }
		
		//time1Unit=TimeUnits
		public Assignment getTime1UnitAssignment_8() { return cTime1UnitAssignment_8; }
		
		//TimeUnits
		public RuleCall getTime1UnitTimeUnitsEnumRuleCall_8_0() { return cTime1UnitTimeUnitsEnumRuleCall_8_0; }
		
		//'for'
		public Keyword getForKeyword_9() { return cForKeyword_9; }
		
		//'size'
		public Keyword getSizeKeyword_10() { return cSizeKeyword_10; }
		
		//'='
		public Keyword getEqualsSignKeyword_11() { return cEqualsSignKeyword_11; }
		
		//size1=INT
		public Assignment getSize1Assignment_12() { return cSize1Assignment_12; }
		
		//INT
		public RuleCall getSize1INTTerminalRuleCall_12_0() { return cSize1INTTerminalRuleCall_12_0; }
		
		//'calculate'
		public Keyword getCalculateKeyword_13() { return cCalculateKeyword_13; }
		
		//'time'
		public Keyword getTimeKeyword_14() { return cTimeKeyword_14; }
		
		//'in'
		public Keyword getInKeyword_15() { return cInKeyword_15; }
		
		//time2Unit=TimeUnits
		public Assignment getTime2UnitAssignment_16() { return cTime2UnitAssignment_16; }
		
		//TimeUnits
		public RuleCall getTime2UnitTimeUnitsEnumRuleCall_16_0() { return cTime2UnitTimeUnitsEnumRuleCall_16_0; }
		
		//'for'
		public Keyword getForKeyword_17() { return cForKeyword_17; }
		
		//'size'
		public Keyword getSizeKeyword_18() { return cSizeKeyword_18; }
		
		//'='
		public Keyword getEqualsSignKeyword_19() { return cEqualsSignKeyword_19; }
		
		//size2=INT
		public Assignment getSize2Assignment_20() { return cSize2Assignment_20; }
		
		//INT
		public RuleCall getSize2INTTerminalRuleCall_20_0() { return cSize2INTTerminalRuleCall_20_0; }
	}
	public class SizesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "algorithms.complexities.Complexities.Sizes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cComplexityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComplexityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComplexityComplexityParserRuleCall_3_0 = (RuleCall)cComplexityAssignment_3.eContents().get(0);
		private final Keyword cIfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSizeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSize1Assignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSize1INTTerminalRuleCall_7_0 = (RuleCall)cSize1Assignment_7.eContents().get(0);
		private final Keyword cForKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cTimeKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cTime1Assignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cTime1INTTerminalRuleCall_11_0 = (RuleCall)cTime1Assignment_11.eContents().get(0);
		private final Assignment cTime1UnitAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cTime1UnitTimeUnitsEnumRuleCall_12_0 = (RuleCall)cTime1UnitAssignment_12.eContents().get(0);
		private final Keyword cCalculateKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cSizeKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cWithKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cTimeKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cEqualsSignKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cTime2Assignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cTime2INTTerminalRuleCall_18_0 = (RuleCall)cTime2Assignment_18.eContents().get(0);
		private final Assignment cTime2UnitAssignment_19 = (Assignment)cGroup.eContents().get(19);
		private final RuleCall cTime2UnitTimeUnitsEnumRuleCall_19_0 = (RuleCall)cTime2UnitAssignment_19.eContents().get(0);
		
		//Sizes:
		//	'with' 'a' 'complexity' complexity=Complexity
		//	'if' 'size' '=' size1=INT 'for' 'time' '=' time1=INT time1Unit=TimeUnits 'calculate' 'size' 'with' 'time' '='
		//	time2=INT time2Unit=TimeUnits;
		@Override public ParserRule getRule() { return rule; }
		
		//'with' 'a' 'complexity' complexity=Complexity 'if' 'size' '=' size1=INT 'for' 'time' '=' time1=INT time1Unit=TimeUnits
		//'calculate' 'size' 'with' 'time' '=' time2=INT time2Unit=TimeUnits
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//'a'
		public Keyword getAKeyword_1() { return cAKeyword_1; }
		
		//'complexity'
		public Keyword getComplexityKeyword_2() { return cComplexityKeyword_2; }
		
		//complexity=Complexity
		public Assignment getComplexityAssignment_3() { return cComplexityAssignment_3; }
		
		//Complexity
		public RuleCall getComplexityComplexityParserRuleCall_3_0() { return cComplexityComplexityParserRuleCall_3_0; }
		
		//'if'
		public Keyword getIfKeyword_4() { return cIfKeyword_4; }
		
		//'size'
		public Keyword getSizeKeyword_5() { return cSizeKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//size1=INT
		public Assignment getSize1Assignment_7() { return cSize1Assignment_7; }
		
		//INT
		public RuleCall getSize1INTTerminalRuleCall_7_0() { return cSize1INTTerminalRuleCall_7_0; }
		
		//'for'
		public Keyword getForKeyword_8() { return cForKeyword_8; }
		
		//'time'
		public Keyword getTimeKeyword_9() { return cTimeKeyword_9; }
		
		//'='
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//time1=INT
		public Assignment getTime1Assignment_11() { return cTime1Assignment_11; }
		
		//INT
		public RuleCall getTime1INTTerminalRuleCall_11_0() { return cTime1INTTerminalRuleCall_11_0; }
		
		//time1Unit=TimeUnits
		public Assignment getTime1UnitAssignment_12() { return cTime1UnitAssignment_12; }
		
		//TimeUnits
		public RuleCall getTime1UnitTimeUnitsEnumRuleCall_12_0() { return cTime1UnitTimeUnitsEnumRuleCall_12_0; }
		
		//'calculate'
		public Keyword getCalculateKeyword_13() { return cCalculateKeyword_13; }
		
		//'size'
		public Keyword getSizeKeyword_14() { return cSizeKeyword_14; }
		
		//'with'
		public Keyword getWithKeyword_15() { return cWithKeyword_15; }
		
		//'time'
		public Keyword getTimeKeyword_16() { return cTimeKeyword_16; }
		
		//'='
		public Keyword getEqualsSignKeyword_17() { return cEqualsSignKeyword_17; }
		
		//time2=INT
		public Assignment getTime2Assignment_18() { return cTime2Assignment_18; }
		
		//INT
		public RuleCall getTime2INTTerminalRuleCall_18_0() { return cTime2INTTerminalRuleCall_18_0; }
		
		//time2Unit=TimeUnits
		public Assignment getTime2UnitAssignment_19() { return cTime2UnitAssignment_19; }
		
		//TimeUnits
		public RuleCall getTime2UnitTimeUnitsEnumRuleCall_19_0() { return cTime2UnitTimeUnitsEnumRuleCall_19_0; }
	}
	public class ComplexityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "algorithms.complexities.Complexities.Complexity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cLINEARTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cEXPONENTIALTerminalRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		private final RuleCall cLOGARITHMICTerminalRuleCall_2_3 = (RuleCall)cAlternatives_2.eContents().get(3);
		private final RuleCall cLINLOGTerminalRuleCall_2_4 = (RuleCall)cAlternatives_2.eContents().get(4);
		private final RuleCall cLINLOGEXPTerminalRuleCall_2_5 = (RuleCall)cAlternatives_2.eContents().get(5);
		private final RuleCall cPOWERTerminalRuleCall_2_6 = (RuleCall)cAlternatives_2.eContents().get(6);
		private final RuleCall cFACTORIALTerminalRuleCall_2_7 = (RuleCall)cAlternatives_2.eContents().get(7);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Complexity:
		//	'O' '(' (INT | LINEAR | EXPONENTIAL | LOGARITHMIC | LINLOG | LINLOGEXP | POWER | FACTORIAL) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'O' '(' (INT | LINEAR | EXPONENTIAL | LOGARITHMIC | LINLOG | LINLOGEXP | POWER | FACTORIAL) ')'
		public Group getGroup() { return cGroup; }
		
		//'O'
		public Keyword getOKeyword_0() { return cOKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//INT | LINEAR | EXPONENTIAL | LOGARITHMIC | LINLOG | LINLOGEXP | POWER | FACTORIAL
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }
		
		//LINEAR
		public RuleCall getLINEARTerminalRuleCall_2_1() { return cLINEARTerminalRuleCall_2_1; }
		
		//EXPONENTIAL
		public RuleCall getEXPONENTIALTerminalRuleCall_2_2() { return cEXPONENTIALTerminalRuleCall_2_2; }
		
		//LOGARITHMIC
		public RuleCall getLOGARITHMICTerminalRuleCall_2_3() { return cLOGARITHMICTerminalRuleCall_2_3; }
		
		//LINLOG
		public RuleCall getLINLOGTerminalRuleCall_2_4() { return cLINLOGTerminalRuleCall_2_4; }
		
		//LINLOGEXP
		public RuleCall getLINLOGEXPTerminalRuleCall_2_5() { return cLINLOGEXPTerminalRuleCall_2_5; }
		
		//POWER
		public RuleCall getPOWERTerminalRuleCall_2_6() { return cPOWERTerminalRuleCall_2_6; }
		
		//FACTORIAL
		public RuleCall getFACTORIALTerminalRuleCall_2_7() { return cFACTORIALTerminalRuleCall_2_7; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	public class TimeUnitsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "algorithms.complexities.Complexities.TimeUnits");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSecondsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSecondsSecondsKeyword_0_0 = (Keyword)cSecondsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMinutesEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMinutesMinutesKeyword_1_0 = (Keyword)cMinutesEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHoursEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHoursHoursKeyword_2_0 = (Keyword)cHoursEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDaysEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDaysDaysKeyword_3_0 = (Keyword)cDaysEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cWeeksEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cWeeksWeeksKeyword_4_0 = (Keyword)cWeeksEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMonthsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMonthsMonthsKeyword_5_0 = (Keyword)cMonthsEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cYearsEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cYearsYearsKeyword_6_0 = (Keyword)cYearsEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum TimeUnits:
		//	seconds | minutes | hours | days | weeks | months | years;
		public EnumRule getRule() { return rule; }
		
		//seconds | minutes | hours | days | weeks | months | years
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//seconds
		public EnumLiteralDeclaration getSecondsEnumLiteralDeclaration_0() { return cSecondsEnumLiteralDeclaration_0; }
		
		//"seconds"
		public Keyword getSecondsSecondsKeyword_0_0() { return cSecondsSecondsKeyword_0_0; }
		
		//minutes
		public EnumLiteralDeclaration getMinutesEnumLiteralDeclaration_1() { return cMinutesEnumLiteralDeclaration_1; }
		
		//"minutes"
		public Keyword getMinutesMinutesKeyword_1_0() { return cMinutesMinutesKeyword_1_0; }
		
		//hours
		public EnumLiteralDeclaration getHoursEnumLiteralDeclaration_2() { return cHoursEnumLiteralDeclaration_2; }
		
		//"hours"
		public Keyword getHoursHoursKeyword_2_0() { return cHoursHoursKeyword_2_0; }
		
		//days
		public EnumLiteralDeclaration getDaysEnumLiteralDeclaration_3() { return cDaysEnumLiteralDeclaration_3; }
		
		//"days"
		public Keyword getDaysDaysKeyword_3_0() { return cDaysDaysKeyword_3_0; }
		
		//weeks
		public EnumLiteralDeclaration getWeeksEnumLiteralDeclaration_4() { return cWeeksEnumLiteralDeclaration_4; }
		
		//"weeks"
		public Keyword getWeeksWeeksKeyword_4_0() { return cWeeksWeeksKeyword_4_0; }
		
		//months
		public EnumLiteralDeclaration getMonthsEnumLiteralDeclaration_5() { return cMonthsEnumLiteralDeclaration_5; }
		
		//"months"
		public Keyword getMonthsMonthsKeyword_5_0() { return cMonthsMonthsKeyword_5_0; }
		
		//years
		public EnumLiteralDeclaration getYearsEnumLiteralDeclaration_6() { return cYearsEnumLiteralDeclaration_6; }
		
		//"years"
		public Keyword getYearsYearsKeyword_6_0() { return cYearsYearsKeyword_6_0; }
	}
	
	private final ModelElements pModel;
	private final CalculationElements pCalculation;
	private final ExecutionTimesElements pExecutionTimes;
	private final SizesElements pSizes;
	private final ComplexityElements pComplexity;
	private final TerminalRule tLINEAR;
	private final TerminalRule tEXPONENTIAL;
	private final TerminalRule tLOGARITHMIC;
	private final TerminalRule tLINLOG;
	private final TerminalRule tLINLOGEXP;
	private final TerminalRule tPOWER;
	private final TerminalRule tFACTORIAL;
	private final TimeUnitsElements eTimeUnits;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ComplexitiesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCalculation = new CalculationElements();
		this.pExecutionTimes = new ExecutionTimesElements();
		this.pSizes = new SizesElements();
		this.pComplexity = new ComplexityElements();
		this.tLINEAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "algorithms.complexities.Complexities.LINEAR");
		this.tEXPONENTIAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "algorithms.complexities.Complexities.EXPONENTIAL");
		this.tLOGARITHMIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "algorithms.complexities.Complexities.LOGARITHMIC");
		this.tLINLOG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "algorithms.complexities.Complexities.LINLOG");
		this.tLINLOGEXP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "algorithms.complexities.Complexities.LINLOGEXP");
		this.tPOWER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "algorithms.complexities.Complexities.POWER");
		this.tFACTORIAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "algorithms.complexities.Complexities.FACTORIAL");
		this.eTimeUnits = new TimeUnitsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("algorithms.complexities.Complexities".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model: //'language' '=' language = LanguageCode
	//	'calculations' calculations+=Calculation+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Calculation:
	//	ExecutionTimes | Sizes;
	public CalculationElements getCalculationAccess() {
		return pCalculation;
	}
	
	public ParserRule getCalculationRule() {
		return getCalculationAccess().getRule();
	}
	
	//ExecutionTimes:
	//	'with' 'a' 'complexity' complexity=Complexity
	//	'if' 'time' '=' time1=INT time1Unit=TimeUnits 'for' 'size' '=' size1=INT 'calculate' 'time' 'in' time2Unit=TimeUnits
	//	'for' 'size' '=' size2=INT;
	public ExecutionTimesElements getExecutionTimesAccess() {
		return pExecutionTimes;
	}
	
	public ParserRule getExecutionTimesRule() {
		return getExecutionTimesAccess().getRule();
	}
	
	//Sizes:
	//	'with' 'a' 'complexity' complexity=Complexity
	//	'if' 'size' '=' size1=INT 'for' 'time' '=' time1=INT time1Unit=TimeUnits 'calculate' 'size' 'with' 'time' '='
	//	time2=INT time2Unit=TimeUnits;
	public SizesElements getSizesAccess() {
		return pSizes;
	}
	
	public ParserRule getSizesRule() {
		return getSizesAccess().getRule();
	}
	
	//Complexity:
	//	'O' '(' (INT | LINEAR | EXPONENTIAL | LOGARITHMIC | LINLOG | LINLOGEXP | POWER | FACTORIAL) ')';
	public ComplexityElements getComplexityAccess() {
		return pComplexity;
	}
	
	public ParserRule getComplexityRule() {
		return getComplexityAccess().getRule();
	}
	
	//terminal LINEAR:
	//	'n';
	public TerminalRule getLINEARRule() {
		return tLINEAR;
	}
	
	//terminal EXPONENTIAL:
	//	'n^' '1'..'9'+;
	public TerminalRule getEXPONENTIALRule() {
		return tEXPONENTIAL;
	}
	
	//terminal LOGARITHMIC:
	//	'log' 'n';
	public TerminalRule getLOGARITHMICRule() {
		return tLOGARITHMIC;
	}
	
	//terminal LINLOG:
	//	'n' 'log' 'n';
	public TerminalRule getLINLOGRule() {
		return tLINLOG;
	}
	
	//terminal LINLOGEXP:
	//	'n^' '1'..'9'+ 'log^' '1'..'9'+ ' '+ 'n';
	public TerminalRule getLINLOGEXPRule() {
		return tLINLOGEXP;
	}
	
	//terminal POWER:
	//	'1'..'9'+ '^' 'n';
	public TerminalRule getPOWERRule() {
		return tPOWER;
	}
	
	//terminal FACTORIAL:
	//	'n!';
	public TerminalRule getFACTORIALRule() {
		return tFACTORIAL;
	}
	
	//enum TimeUnits:
	//	seconds | minutes | hours | days | weeks | months | years;
	public TimeUnitsElements getTimeUnitsAccess() {
		return eTimeUnits;
	}
	
	public EnumRule getTimeUnitsRule() {
		return getTimeUnitsAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
