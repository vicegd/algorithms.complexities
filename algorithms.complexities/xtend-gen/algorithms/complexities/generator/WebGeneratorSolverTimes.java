package algorithms.complexities.generator;

import algorithms.complexities.complexities.ExecutionTimes;
import algorithms.complexities.complexities.TimeUnits;
import algorithms.complexities.generator.Utils;
import com.google.common.base.Objects;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class WebGeneratorSolverTimes {
  public static CharSequence solveTimes(final ExecutionTimes e) {
    StringConcatenation _builder = new StringConcatenation();
    int _size2 = e.getSize2();
    double _doubleValue = Integer.valueOf(e.getSize1()).doubleValue();
    double k = (_size2 / _doubleValue);
    _builder.newLineIfNotEmpty();
    {
      boolean _matches = e.getComplexity().matches("O\\([1-9]+\\)");
      if (_matches) {
        CharSequence _solveTimesConstant = WebGeneratorSolverTimes.solveTimesConstant(e);
        _builder.append(_solveTimesConstant);
        _builder.newLineIfNotEmpty();
      } else {
        boolean _matches_1 = e.getComplexity().matches("O\\(n\\)");
        if (_matches_1) {
          CharSequence _solveTimesLinear = WebGeneratorSolverTimes.solveTimesLinear(e, k);
          _builder.append(_solveTimesLinear);
          _builder.newLineIfNotEmpty();
        } else {
          boolean _matches_2 = e.getComplexity().matches("O\\(n\\^[1-9]+\\)");
          if (_matches_2) {
            double c = Utils.getValueExp(e.getComplexity());
            _builder.newLineIfNotEmpty();
            CharSequence _solveTimesExponential = WebGeneratorSolverTimes.solveTimesExponential(e, k, c);
            _builder.append(_solveTimesExponential);
            _builder.newLineIfNotEmpty();
          } else {
            boolean _matches_3 = e.getComplexity().matches("O\\(logn\\)");
            if (_matches_3) {
              CharSequence _solveTimesLogarithmic = WebGeneratorSolverTimes.solveTimesLogarithmic(e, k);
              _builder.append(_solveTimesLogarithmic);
              _builder.newLineIfNotEmpty();
            } else {
              boolean _matches_4 = e.getComplexity().matches("O\\(nlogn\\)");
              if (_matches_4) {
                CharSequence _solveTimesLinLog = WebGeneratorSolverTimes.solveTimesLinLog(e, k);
                _builder.append(_solveTimesLinLog);
                _builder.newLineIfNotEmpty();
              } else {
                boolean _matches_5 = e.getComplexity().matches("O\\(n\\^[1-9]+log\\^[1-9]+\\sn\\)");
                if (_matches_5) {
                  double c1 = Utils.getValueLinLogExp1(e.getComplexity());
                  _builder.newLineIfNotEmpty();
                  double c2 = Utils.getValueLinLogExp2(e.getComplexity());
                  _builder.newLineIfNotEmpty();
                  CharSequence _solveTimesLinLogExp = WebGeneratorSolverTimes.solveTimesLinLogExp(e, k, c1, c2);
                  _builder.append(_solveTimesLinLogExp);
                  _builder.newLineIfNotEmpty();
                } else {
                  boolean _matches_6 = e.getComplexity().matches("O\\([1-9]+\\^n\\)");
                  if (_matches_6) {
                    double c_1 = Utils.getValuePower(e.getComplexity());
                    _builder.newLineIfNotEmpty();
                    CharSequence _solveTimesPower = WebGeneratorSolverTimes.solveTimesPower(e, k, c_1);
                    _builder.append(_solveTimesPower);
                    _builder.newLineIfNotEmpty();
                  } else {
                    boolean _matches_7 = e.getComplexity().matches("O\\(n!\\)");
                    if (_matches_7) {
                      CharSequence _solveTimesFactorial = WebGeneratorSolverTimes.solveTimesFactorial(e);
                      _builder.append(_solveTimesFactorial);
                      _builder.newLineIfNotEmpty();
                    } else {
                      CharSequence _noSolveTimes = WebGeneratorSolverTimes.noSolveTimes();
                      _builder.append(_noSolveTimes);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public static CharSequence solveTimesConstant(final ExecutionTimes e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<p>$ t_2 = { 1 \\over 1 } \\times ");
    int _time1 = e.getTime1();
    _builder.append(_time1);
    _builder.append(" $ ");
    TimeUnits _time1Unit = e.getTime1Unit();
    _builder.append(_time1Unit);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    {
      TimeUnits _time1Unit_1 = e.getTime1Unit();
      TimeUnits _time2Unit = e.getTime2Unit();
      boolean _notEquals = (!Objects.equal(_time1Unit_1, _time2Unit));
      if (_notEquals) {
        _builder.append("<p>$ t_2 = ");
        double _matchUnits = Utils.matchUnits(e.getTime1(), e.getTime1Unit(), e.getTime2Unit());
        _builder.append(_matchUnits);
        _builder.append(" $ ");
        TimeUnits _time2Unit_1 = e.getTime2Unit();
        _builder.append(_time2Unit_1);
        _builder.append("</p>\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public static CharSequence solveTimesLinear(final ExecutionTimes e, final double k) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<p>$ t_2 = { n_2 \\over n_1 } \\times ");
    int _time1 = e.getTime1();
    _builder.append(_time1);
    _builder.append(" $ ");
    TimeUnits _time1Unit = e.getTime1Unit();
    _builder.append(_time1Unit);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = k \\times ");
    int _time1_1 = e.getTime1();
    _builder.append(_time1_1);
    _builder.append(" $ ");
    TimeUnits _time1Unit_1 = e.getTime1Unit();
    _builder.append(_time1Unit_1);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    _builder.append(k);
    _builder.append(" \\times ");
    int _time1_2 = e.getTime1();
    _builder.append(_time1_2);
    _builder.append(" $ ");
    TimeUnits _time1Unit_2 = e.getTime1Unit();
    _builder.append(_time1Unit_2);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    int _time1_3 = e.getTime1();
    double result = (k * _time1_3);
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    _builder.append(result);
    _builder.append(" $ ");
    TimeUnits _time1Unit_3 = e.getTime1Unit();
    _builder.append(_time1Unit_3);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    {
      TimeUnits _time1Unit_4 = e.getTime1Unit();
      TimeUnits _time2Unit = e.getTime2Unit();
      boolean _notEquals = (!Objects.equal(_time1Unit_4, _time2Unit));
      if (_notEquals) {
        _builder.append("<p>$ t_2 = ");
        double _matchUnits = Utils.matchUnits(result, e.getTime1Unit(), e.getTime2Unit());
        _builder.append(_matchUnits);
        _builder.append(" $ ");
        TimeUnits _time2Unit_1 = e.getTime2Unit();
        _builder.append(_time2Unit_1);
        _builder.append("</p>");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public static CharSequence solveTimesExponential(final ExecutionTimes e, final double k, final double c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<p>$ c = ");
    _builder.append(c);
    _builder.append(" $</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<p>$ t_2 = { n_2^{c} \\over n_1^{c} } \\times ");
    int _time1 = e.getTime1();
    _builder.append(_time1);
    _builder.append(" $ ");
    TimeUnits _time1Unit = e.getTime1Unit();
    _builder.append(_time1Unit);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = { n_2^{");
    _builder.append(c);
    _builder.append("} \\over n_1^{");
    _builder.append(c);
    _builder.append("} } \\times ");
    int _time1_1 = e.getTime1();
    _builder.append(_time1_1);
    _builder.append(" $ ");
    TimeUnits _time1Unit_1 = e.getTime1Unit();
    _builder.append(_time1Unit_1);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = k^{");
    _builder.append(c);
    _builder.append("} \\times ");
    int _time1_2 = e.getTime1();
    _builder.append(_time1_2);
    _builder.append(" $ ");
    TimeUnits _time1Unit_2 = e.getTime1Unit();
    _builder.append(_time1Unit_2);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    _builder.append(k);
    _builder.append("^{");
    _builder.append(c);
    _builder.append("} \\times ");
    int _time1_3 = e.getTime1();
    _builder.append(_time1_3);
    _builder.append(" $ ");
    TimeUnits _time1Unit_3 = e.getTime1Unit();
    _builder.append(_time1Unit_3);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    double _pow = Math.pow(k, c);
    _builder.append(_pow);
    _builder.append(" \\times ");
    int _time1_4 = e.getTime1();
    _builder.append(_time1_4);
    _builder.append(" $ ");
    TimeUnits _time1Unit_4 = e.getTime1Unit();
    _builder.append(_time1Unit_4);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    double _pow_1 = Math.pow(k, c);
    int _time1_5 = e.getTime1();
    double result = (_pow_1 * _time1_5);
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    _builder.append(result);
    _builder.append(" $ ");
    TimeUnits _time1Unit_5 = e.getTime1Unit();
    _builder.append(_time1Unit_5);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    {
      TimeUnits _time1Unit_6 = e.getTime1Unit();
      TimeUnits _time2Unit = e.getTime2Unit();
      boolean _notEquals = (!Objects.equal(_time1Unit_6, _time2Unit));
      if (_notEquals) {
        _builder.append("<p>$ t_2 = ");
        double _matchUnits = Utils.matchUnits(result, e.getTime1Unit(), e.getTime2Unit());
        _builder.append(_matchUnits);
        _builder.append(" $ ");
        TimeUnits _time2Unit_1 = e.getTime2Unit();
        _builder.append(_time2Unit_1);
        _builder.append("</p>");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public static CharSequence solveTimesLogarithmic(final ExecutionTimes e, final double k) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<p>$ t_2 = { \\log n_2 \\over \\log n_1 } \\times ");
    int _time1 = e.getTime1();
    _builder.append(_time1);
    _builder.append(" $ ");
    TimeUnits _time1Unit = e.getTime1Unit();
    _builder.append(_time1Unit);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = { \\log k \\times n_1 \\over \\log n_1 } \\times ");
    int _time1_1 = e.getTime1();
    _builder.append(_time1_1);
    _builder.append(" $ ");
    TimeUnits _time1Unit_1 = e.getTime1Unit();
    _builder.append(_time1Unit_1);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = { \\log k + \\log n_1 \\over \\log n_1 } \\times ");
    int _time1_2 = e.getTime1();
    _builder.append(_time1_2);
    _builder.append(" $ ");
    TimeUnits _time1Unit_2 = e.getTime1Unit();
    _builder.append(_time1Unit_2);
    _builder.append("</p>\t");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = { \\log ");
    _builder.append(k);
    _builder.append(" + \\log ");
    int _size1 = e.getSize1();
    _builder.append(_size1);
    _builder.append(" \\over \\log ");
    int _size1_1 = e.getSize1();
    _builder.append(_size1_1);
    _builder.append(" } \\times ");
    int _time1_3 = e.getTime1();
    _builder.append(_time1_3);
    _builder.append(" $ ");
    TimeUnits _time1Unit_3 = e.getTime1Unit();
    _builder.append(_time1Unit_3);
    _builder.append("</p>\t");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = { ");
    double _log = Utils.log(k);
    _builder.append(_log);
    _builder.append(" + ");
    double _log_1 = Utils.log(e.getSize1());
    _builder.append(_log_1);
    _builder.append(" \\over ");
    double _log_2 = Utils.log(e.getSize1());
    _builder.append(_log_2);
    _builder.append(" } \\times ");
    int _time1_4 = e.getTime1();
    _builder.append(_time1_4);
    _builder.append(" $ ");
    TimeUnits _time1Unit_4 = e.getTime1Unit();
    _builder.append(_time1Unit_4);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = { ");
    double _log_3 = Utils.log(k);
    double _log_4 = Utils.log(e.getSize1());
    double _plus = (_log_3 + _log_4);
    _builder.append(_plus);
    _builder.append(" \\over ");
    double _log_5 = Utils.log(e.getSize1());
    _builder.append(_log_5);
    _builder.append(" } \\times ");
    int _time1_5 = e.getTime1();
    _builder.append(_time1_5);
    _builder.append(" $ ");
    TimeUnits _time1Unit_5 = e.getTime1Unit();
    _builder.append(_time1Unit_5);
    _builder.append("</p>\t");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = { ");
    double _log_6 = Utils.log(k);
    double _log_7 = Utils.log(e.getSize1());
    double _plus_1 = (_log_6 + _log_7);
    double _log_8 = Utils.log(e.getSize1());
    double _divide = (_plus_1 / _log_8);
    _builder.append(_divide);
    _builder.append(" } \\times ");
    int _time1_6 = e.getTime1();
    _builder.append(_time1_6);
    _builder.append(" $ ");
    TimeUnits _time1Unit_6 = e.getTime1Unit();
    _builder.append(_time1Unit_6);
    _builder.append("</p>\t");
    _builder.newLineIfNotEmpty();
    double _log_9 = Utils.log(k);
    double _log_10 = Utils.log(e.getSize1());
    double _plus_2 = (_log_9 + _log_10);
    double _log_11 = Utils.log(e.getSize1());
    double _divide_1 = (_plus_2 / _log_11);
    int _time1_7 = e.getTime1();
    double result = (_divide_1 * _time1_7);
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    _builder.append(result);
    _builder.append(" $ ");
    TimeUnits _time1Unit_7 = e.getTime1Unit();
    _builder.append(_time1Unit_7);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    {
      TimeUnits _time1Unit_8 = e.getTime1Unit();
      TimeUnits _time2Unit = e.getTime2Unit();
      boolean _notEquals = (!Objects.equal(_time1Unit_8, _time2Unit));
      if (_notEquals) {
        _builder.append("<p>$ t_2 = ");
        double _matchUnits = Utils.matchUnits(result, e.getTime1Unit(), e.getTime2Unit());
        _builder.append(_matchUnits);
        _builder.append(" $ ");
        TimeUnits _time2Unit_1 = e.getTime2Unit();
        _builder.append(_time2Unit_1);
        _builder.append("</p>");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public static CharSequence solveTimesLinLog(final ExecutionTimes e, final double k) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<p>$ t_2 = { n_2 \\times \\log n_2 \\over n_1 \\times \\log n_1 } \\times ");
    int _time1 = e.getTime1();
    _builder.append(_time1);
    _builder.append(" $ ");
    TimeUnits _time1Unit = e.getTime1Unit();
    _builder.append(_time1Unit);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = k \\times { \\log k \\times n_1 \\over \\log n_1 } \\times ");
    int _time1_1 = e.getTime1();
    _builder.append(_time1_1);
    _builder.append(" $ ");
    TimeUnits _time1Unit_1 = e.getTime1Unit();
    _builder.append(_time1Unit_1);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = k \\times { \\log k + \\log n_1 \\over \\log n_1 } \\times ");
    int _time1_2 = e.getTime1();
    _builder.append(_time1_2);
    _builder.append(" $ ");
    TimeUnits _time1Unit_2 = e.getTime1Unit();
    _builder.append(_time1Unit_2);
    _builder.append("</p>\t");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    _builder.append(k);
    _builder.append(" \\times { \\log ");
    _builder.append(k);
    _builder.append(" + \\log ");
    int _size1 = e.getSize1();
    _builder.append(_size1);
    _builder.append(" \\over \\log ");
    int _size1_1 = e.getSize1();
    _builder.append(_size1_1);
    _builder.append(" } \\times ");
    int _time1_3 = e.getTime1();
    _builder.append(_time1_3);
    _builder.append(" $ ");
    TimeUnits _time1Unit_3 = e.getTime1Unit();
    _builder.append(_time1Unit_3);
    _builder.append("</p>\t");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    _builder.append(k);
    _builder.append(" \\times { ");
    double _log = Utils.log(k);
    _builder.append(_log);
    _builder.append(" + ");
    double _log_1 = Utils.log(e.getSize1());
    _builder.append(_log_1);
    _builder.append(" \\over ");
    double _log_2 = Utils.log(e.getSize1());
    _builder.append(_log_2);
    _builder.append(" } \\times ");
    int _time1_4 = e.getTime1();
    _builder.append(_time1_4);
    _builder.append(" $ ");
    TimeUnits _time1Unit_4 = e.getTime1Unit();
    _builder.append(_time1Unit_4);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    _builder.append(k);
    _builder.append(" \\times { ");
    double _log_3 = Utils.log(k);
    double _log_4 = Utils.log(e.getSize1());
    double _plus = (_log_3 + _log_4);
    _builder.append(_plus);
    _builder.append(" \\over ");
    double _log_5 = Utils.log(e.getSize1());
    _builder.append(_log_5);
    _builder.append(" } \\times ");
    int _time1_5 = e.getTime1();
    _builder.append(_time1_5);
    _builder.append(" $ ");
    TimeUnits _time1Unit_5 = e.getTime1Unit();
    _builder.append(_time1Unit_5);
    _builder.append("</p>\t");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    _builder.append(k);
    _builder.append(" \\times { ");
    double _log_6 = Utils.log(k);
    double _log_7 = Utils.log(e.getSize1());
    double _plus_1 = (_log_6 + _log_7);
    double _log_8 = Utils.log(e.getSize1());
    double _divide = (_plus_1 / _log_8);
    _builder.append(_divide);
    _builder.append(" } \\times ");
    int _time1_6 = e.getTime1();
    _builder.append(_time1_6);
    _builder.append(" $ ");
    TimeUnits _time1Unit_6 = e.getTime1Unit();
    _builder.append(_time1Unit_6);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    double _log_9 = Utils.log(k);
    double _log_10 = Utils.log(e.getSize1());
    double _plus_2 = (_log_9 + _log_10);
    double _multiply = (k * _plus_2);
    double _log_11 = Utils.log(e.getSize1());
    double _divide_1 = (_multiply / _log_11);
    _builder.append(_divide_1);
    _builder.append(" \\times ");
    int _time1_7 = e.getTime1();
    _builder.append(_time1_7);
    _builder.append(" $ ");
    TimeUnits _time1Unit_7 = e.getTime1Unit();
    _builder.append(_time1Unit_7);
    _builder.append("</p>\t\t");
    _builder.newLineIfNotEmpty();
    double _log_12 = Utils.log(k);
    double _log_13 = Utils.log(e.getSize1());
    double _plus_3 = (_log_12 + _log_13);
    double _multiply_1 = (k * _plus_3);
    double _log_14 = Utils.log(e.getSize1());
    double _divide_2 = (_multiply_1 / _log_14);
    int _time1_8 = e.getTime1();
    double result = (_divide_2 * _time1_8);
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    _builder.append(result);
    _builder.append(" $ ");
    TimeUnits _time1Unit_8 = e.getTime1Unit();
    _builder.append(_time1Unit_8);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    {
      TimeUnits _time1Unit_9 = e.getTime1Unit();
      TimeUnits _time2Unit = e.getTime2Unit();
      boolean _notEquals = (!Objects.equal(_time1Unit_9, _time2Unit));
      if (_notEquals) {
        _builder.append("<p>$ t_2 = ");
        double _matchUnits = Utils.matchUnits(result, e.getTime1Unit(), e.getTime2Unit());
        _builder.append(_matchUnits);
        _builder.append(" $ ");
        TimeUnits _time2Unit_1 = e.getTime2Unit();
        _builder.append(_time2Unit_1);
        _builder.append("</p>");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public static CharSequence solveTimesLinLogExp(final ExecutionTimes e, final double k, final double c1, final double c2) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<p>$ c_1 = ");
    _builder.append(c1);
    _builder.append("; c_2 = ");
    _builder.append(c2);
    _builder.append(" $</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<p>$ t_2 = { n_2^{c_1} \\times \\log^{c_2} n_2 \\over n_1^{c_1} \\times \\log^{c_2} n_1 } \\times ");
    int _time1 = e.getTime1();
    _builder.append(_time1);
    _builder.append(" $ ");
    TimeUnits _time1Unit = e.getTime1Unit();
    _builder.append(_time1Unit);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = k^{c_1} { \\log^{c_2} K \\times n_1 \\over \\log^{c_2} n_1 } \\times ");
    int _time1_1 = e.getTime1();
    _builder.append(_time1_1);
    _builder.append(" $ ");
    TimeUnits _time1Unit_1 = e.getTime1Unit();
    _builder.append(_time1Unit_1);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    _builder.append(k);
    _builder.append("^{");
    _builder.append(c1);
    _builder.append("} { \\log^{");
    _builder.append(c2);
    _builder.append("} ");
    _builder.append(k);
    _builder.append(" \\times ");
    int _size1 = e.getSize1();
    _builder.append(_size1);
    _builder.append(" \\over \\log^{");
    _builder.append(c2);
    _builder.append("} ");
    int _size1_1 = e.getSize1();
    _builder.append(_size1_1);
    _builder.append(" } \\times ");
    int _time1_2 = e.getTime1();
    _builder.append(_time1_2);
    _builder.append(" $ ");
    TimeUnits _time1Unit_2 = e.getTime1Unit();
    _builder.append(_time1Unit_2);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    double _pow = Math.pow(k, c1);
    _builder.append(_pow);
    _builder.append(" { \\log^{");
    _builder.append(c2);
    _builder.append("} ");
    int _size1_2 = e.getSize1();
    double _multiply = (k * _size1_2);
    _builder.append(_multiply);
    _builder.append(" \\over \\log^{");
    _builder.append(c2);
    _builder.append("} ");
    int _size1_3 = e.getSize1();
    _builder.append(_size1_3);
    _builder.append(" } \\times ");
    int _time1_3 = e.getTime1();
    _builder.append(_time1_3);
    _builder.append(" $ ");
    TimeUnits _time1Unit_3 = e.getTime1Unit();
    _builder.append(_time1Unit_3);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    double _pow_1 = Math.pow(k, c1);
    _builder.append(_pow_1);
    _builder.append(" { ");
    int _size1_4 = e.getSize1();
    double _multiply_1 = (k * _size1_4);
    double _log = Utils.log(_multiply_1);
    _builder.append(_log);
    _builder.append("^{");
    _builder.append(c2);
    _builder.append("} \\over ");
    double _log_1 = Utils.log(e.getSize1());
    _builder.append(_log_1);
    _builder.append("^{");
    _builder.append(c2);
    _builder.append("} } \\times ");
    int _time1_4 = e.getTime1();
    _builder.append(_time1_4);
    _builder.append(" $ ");
    TimeUnits _time1Unit_4 = e.getTime1Unit();
    _builder.append(_time1Unit_4);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    double _pow_2 = Math.pow(k, c1);
    _builder.append(_pow_2);
    _builder.append(" { ");
    int _size1_5 = e.getSize1();
    double _multiply_2 = (k * _size1_5);
    double _pow_3 = Math.pow(Utils.log(_multiply_2), c2);
    _builder.append(_pow_3);
    _builder.append(" \\over ");
    double _pow_4 = Math.pow(Utils.log(e.getSize1()), c2);
    _builder.append(_pow_4);
    _builder.append(" } \\times ");
    int _time1_5 = e.getTime1();
    _builder.append(_time1_5);
    _builder.append(" $ ");
    TimeUnits _time1Unit_5 = e.getTime1Unit();
    _builder.append(_time1Unit_5);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    double _pow_5 = Math.pow(k, c1);
    _builder.append(_pow_5);
    _builder.append(" \\times { ");
    int _size1_6 = e.getSize1();
    double _multiply_3 = (k * _size1_6);
    double _pow_6 = Math.pow(Utils.log(_multiply_3), c2);
    double _pow_7 = Math.pow(Utils.log(e.getSize1()), c2);
    double _divide = (_pow_6 / _pow_7);
    _builder.append(_divide);
    _builder.append(" } \\times ");
    int _time1_6 = e.getTime1();
    _builder.append(_time1_6);
    _builder.append(" $ ");
    TimeUnits _time1Unit_6 = e.getTime1Unit();
    _builder.append(_time1Unit_6);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    double _pow_8 = Math.pow(k, c1);
    int _size1_7 = e.getSize1();
    double _multiply_4 = (k * _size1_7);
    double _pow_9 = Math.pow(Utils.log(_multiply_4), c2);
    double _multiply_5 = (_pow_8 * _pow_9);
    double _pow_10 = Math.pow(Utils.log(e.getSize1()), c2);
    double _divide_1 = (_multiply_5 / _pow_10);
    _builder.append(_divide_1);
    _builder.append(" \\times ");
    int _time1_7 = e.getTime1();
    _builder.append(_time1_7);
    _builder.append(" $ ");
    TimeUnits _time1Unit_7 = e.getTime1Unit();
    _builder.append(_time1Unit_7);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    double _pow_11 = Math.pow(k, c1);
    int _size1_8 = e.getSize1();
    double _multiply_6 = (k * _size1_8);
    double _pow_12 = Math.pow(Utils.log(_multiply_6), c2);
    double _multiply_7 = (_pow_11 * _pow_12);
    double _pow_13 = Math.pow(Utils.log(e.getSize1()), c2);
    double _divide_2 = (_multiply_7 / _pow_13);
    int _time1_8 = e.getTime1();
    double result = (_divide_2 * _time1_8);
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    _builder.append(result);
    _builder.append(" $ ");
    TimeUnits _time1Unit_8 = e.getTime1Unit();
    _builder.append(_time1Unit_8);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    {
      TimeUnits _time1Unit_9 = e.getTime1Unit();
      TimeUnits _time2Unit = e.getTime2Unit();
      boolean _notEquals = (!Objects.equal(_time1Unit_9, _time2Unit));
      if (_notEquals) {
        _builder.append("<p>$ t_2 = ");
        double _matchUnits = Utils.matchUnits(result, e.getTime1Unit(), e.getTime2Unit());
        _builder.append(_matchUnits);
        _builder.append(" $ ");
        TimeUnits _time2Unit_1 = e.getTime2Unit();
        _builder.append(_time2Unit_1);
        _builder.append("</p>");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public static CharSequence solveTimesPower(final ExecutionTimes e, final double k, final double c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<p>$ c = ");
    _builder.append(c);
    _builder.append(" $</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<p>$ t_2 = { c^{n_2} \\over c^{n_1} } \\times ");
    int _time1 = e.getTime1();
    _builder.append(_time1);
    _builder.append(" $ ");
    TimeUnits _time1Unit = e.getTime1Unit();
    _builder.append(_time1Unit);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = c^{n_2 - n_1} \\times ");
    int _time1_1 = e.getTime1();
    _builder.append(_time1_1);
    _builder.append(" $ ");
    TimeUnits _time1Unit_1 = e.getTime1Unit();
    _builder.append(_time1Unit_1);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = c^{k \\times n_1 - n_1} \\times ");
    int _time1_2 = e.getTime1();
    _builder.append(_time1_2);
    _builder.append(" $ ");
    TimeUnits _time1Unit_2 = e.getTime1Unit();
    _builder.append(_time1Unit_2);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = c^{n_1 \\times (k - 1)} \\times ");
    int _time1_3 = e.getTime1();
    _builder.append(_time1_3);
    _builder.append(" $ ");
    TimeUnits _time1Unit_3 = e.getTime1Unit();
    _builder.append(_time1Unit_3);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    _builder.append(c);
    _builder.append("^{");
    int _size1 = e.getSize1();
    _builder.append(_size1);
    _builder.append(" \\times (");
    _builder.append(k);
    _builder.append(" - 1)} \\times ");
    int _time1_4 = e.getTime1();
    _builder.append(_time1_4);
    _builder.append(" $ ");
    TimeUnits _time1Unit_4 = e.getTime1Unit();
    _builder.append(_time1Unit_4);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    _builder.append(c);
    _builder.append("^{");
    int _size1_1 = e.getSize1();
    double _multiply = (_size1_1 * k);
    int _size1_2 = e.getSize1();
    int _multiply_1 = (_size1_2 * 1);
    double _minus = (_multiply - _multiply_1);
    _builder.append(_minus);
    _builder.append("} \\times ");
    int _time1_5 = e.getTime1();
    _builder.append(_time1_5);
    _builder.append(" $ ");
    TimeUnits _time1Unit_5 = e.getTime1Unit();
    _builder.append(_time1Unit_5);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    int _size1_3 = e.getSize1();
    double _multiply_2 = (_size1_3 * k);
    int _size1_4 = e.getSize1();
    int _multiply_3 = (_size1_4 * 1);
    double _minus_1 = (_multiply_2 - _multiply_3);
    double _pow = Math.pow(c, _minus_1);
    _builder.append(_pow);
    _builder.append(" \\times ");
    int _time1_6 = e.getTime1();
    _builder.append(_time1_6);
    _builder.append(" $ ");
    TimeUnits _time1Unit_6 = e.getTime1Unit();
    _builder.append(_time1Unit_6);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    int _size1_5 = e.getSize1();
    double _multiply_4 = (_size1_5 * k);
    int _size1_6 = e.getSize1();
    int _multiply_5 = (_size1_6 * 1);
    double _minus_2 = (_multiply_4 - _multiply_5);
    double _pow_1 = Math.pow(c, _minus_2);
    int _time1_7 = e.getTime1();
    double result = (_pow_1 * _time1_7);
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    _builder.append(result);
    _builder.append(" $ ");
    TimeUnits _time1Unit_7 = e.getTime1Unit();
    _builder.append(_time1Unit_7);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    {
      TimeUnits _time1Unit_8 = e.getTime1Unit();
      TimeUnits _time2Unit = e.getTime2Unit();
      boolean _notEquals = (!Objects.equal(_time1Unit_8, _time2Unit));
      if (_notEquals) {
        _builder.append("<p>$ t_2 = ");
        double _matchUnits = Utils.matchUnits(result, e.getTime1Unit(), e.getTime2Unit());
        _builder.append(_matchUnits);
        _builder.append(" $ ");
        TimeUnits _time2Unit_1 = e.getTime2Unit();
        _builder.append(_time2Unit_1);
        _builder.append("</p>");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public static CharSequence solveTimesFactorial(final ExecutionTimes e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<p>$ t_2 = { n_2! \\over n_1! } \\times ");
    int _time1 = e.getTime1();
    _builder.append(_time1);
    _builder.append(" $ ");
    TimeUnits _time1Unit = e.getTime1Unit();
    _builder.append(_time1Unit);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = \\prod_{i=n_1 + 1}^{n_2} i \\times ");
    int _time1_1 = e.getTime1();
    _builder.append(_time1_1);
    _builder.append(" $ ");
    TimeUnits _time1Unit_1 = e.getTime1Unit();
    _builder.append(_time1Unit_1);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = \\prod_{i=");
    int _size1 = e.getSize1();
    int _plus = (_size1 + 1);
    _builder.append(_plus);
    _builder.append("}^{");
    int _size2 = e.getSize2();
    _builder.append(_size2);
    _builder.append("} i \\times ");
    int _time1_2 = e.getTime1();
    _builder.append(_time1_2);
    _builder.append(" $ ");
    TimeUnits _time1Unit_2 = e.getTime1Unit();
    _builder.append(_time1Unit_2);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    int _size1_1 = e.getSize1();
    int _plus_1 = (_size1_1 + 1);
    double _factCalculator = Utils.factCalculator(_plus_1, e.getSize2());
    _builder.append(_factCalculator);
    _builder.append(" \\times ");
    int _time1_3 = e.getTime1();
    _builder.append(_time1_3);
    _builder.append(" $ ");
    TimeUnits _time1Unit_3 = e.getTime1Unit();
    _builder.append(_time1Unit_3);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    int _size1_2 = e.getSize1();
    int _plus_2 = (_size1_2 + 1);
    double _factCalculator_1 = Utils.factCalculator(_plus_2, e.getSize2());
    int _time1_4 = e.getTime1();
    double result = (_factCalculator_1 * _time1_4);
    _builder.newLineIfNotEmpty();
    _builder.append("<p>$ t_2 = ");
    _builder.append(result);
    _builder.append(" $ ");
    TimeUnits _time1Unit_4 = e.getTime1Unit();
    _builder.append(_time1Unit_4);
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    {
      TimeUnits _time1Unit_5 = e.getTime1Unit();
      TimeUnits _time2Unit = e.getTime2Unit();
      boolean _notEquals = (!Objects.equal(_time1Unit_5, _time2Unit));
      if (_notEquals) {
        _builder.append("<p>$ t_2 = ");
        double _matchUnits = Utils.matchUnits(result, e.getTime1Unit(), e.getTime2Unit());
        _builder.append(_matchUnits);
        _builder.append(" $ ");
        TimeUnits _time2Unit_1 = e.getTime2Unit();
        _builder.append(_time2Unit_1);
        _builder.append("</p>");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public static CharSequence noSolveTimes() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<p class=\"text-danger\">I am not programmed to solve this problem yet </p>");
    _builder.newLine();
    return _builder;
  }
}
