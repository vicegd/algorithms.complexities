package algorithms.complexities.generator;

import algorithms.complexities.complexities.ExecutionTimes;
import algorithms.complexities.complexities.Model;
import algorithms.complexities.complexities.Sizes;
import algorithms.complexities.complexities.TimeUnits;
import algorithms.complexities.generator.Utils;
import algorithms.complexities.generator.WebGeneratorSolverSizes;
import algorithms.complexities.generator.WebGeneratorSolverTimes;
import com.google.common.collect.Iterables;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;

@SuppressWarnings("all")
public class WebGeneratorEN {
  private Resource resource;
  
  private IFileSystemAccess2 fsa;
  
  public WebGeneratorEN(final Resource resource, final IFileSystemAccess2 fsa) {
    this.resource = resource;
    this.fsa = fsa;
  }
  
  public void generate() {
    EObject _get = this.resource.getContents().get(0);
    Model model = ((Model) _get);
    this.fsa.generateFile("index.html", this.compile(model));
  }
  
  public CharSequence compile(final Model m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<html lang=\"en\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<title>Algorithms complexities</title>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script type=\"text/x-mathjax-config\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("MathJax.Hub.Config({");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tex2jax: {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("inlineMath: [[\'$\',\'$\'], [\'\\\\(\',\'\\\\)\']],");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("processEscapes: true");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</script>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<script type=\"text/javascript\" async");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</script>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<div class=\"jumbotron text-center\">");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("<h1>Algorithms complexities</h1>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<h2>Calculating execution times</h2>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<div class=\"panel-group\">");
    _builder.newLine();
    _builder.append("\t\t");
    int i = 1;
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    {
      Iterable<ExecutionTimes> _filter = Iterables.<ExecutionTimes>filter(m.getCalculations(), ExecutionTimes.class);
      for(final ExecutionTimes c : _filter) {
        _builder.append("\t\t");
        _builder.append("<div class=\"panel panel-success\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<div class=\"panel-heading\">Problem ");
        int _plusPlus = i++;
        _builder.append(_plusPlus, "\t\t\t");
        _builder.append("</div>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<div class=\"panel-body\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<div class=\"well\">A program with a ");
        String _complexity = c.getComplexity();
        _builder.append(_complexity, "\t\t\t");
        _builder.append(" time complexity takes ");
        int _time1 = c.getTime1();
        _builder.append(_time1, "\t\t\t");
        _builder.append(" ");
        TimeUnits _time1Unit = c.getTime1Unit();
        _builder.append(_time1Unit, "\t\t\t");
        _builder.append(" for a problem size of ");
        int _size1 = c.getSize1();
        _builder.append(_size1, "\t\t\t");
        _builder.append(". How long would it take for a larger size of ");
        int _size2 = c.getSize2();
        _builder.append(_size2, "\t\t\t");
        _builder.append("?</div>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<p class=\"text-info\">Solution</p>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<div class=\"alert alert-info\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<p>If for $ f(n_1)$ it takes $t_1$ and for $f(n_2)$ it takes $t_2 \\to t_2 = { f(n_2) \\over f(n_1) } \\times t_1$</p>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<p>$ n_1 = ");
        int _size1_1 = c.getSize1();
        _builder.append(_size1_1, "\t\t\t");
        _builder.append("; t_1 = ");
        int _time1_1 = c.getTime1();
        _builder.append(_time1_1, "\t\t\t");
        _builder.append("; n_n = ");
        int _size2_1 = c.getSize2();
        _builder.append(_size2_1, "\t\t\t");
        _builder.append("; t_2 = ? $</p>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<p>$ n_2 = k \\times n_1 \\to k = { n_2 \\over n_1 } = { ");
        int _size2_2 = c.getSize2();
        _builder.append(_size2_2, "\t\t\t");
        _builder.append(" \\over ");
        int _size1_2 = c.getSize1();
        _builder.append(_size1_2, "\t\t\t");
        _builder.append(" } = ");
        int _size2_3 = c.getSize2();
        int _size1_3 = c.getSize1();
        int _divide = (_size2_3 / _size1_3);
        _builder.append(_divide, "\t\t\t");
        _builder.append(" $</p>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        CharSequence _solveTimes = WebGeneratorSolverTimes.solveTimes(c);
        _builder.append(_solveTimes, "\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("</div>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("</div>");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<h2>Calculating problem sizes</h2>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<div class=\"panel-group\">");
    _builder.newLine();
    {
      Iterable<Sizes> _filter_1 = Iterables.<Sizes>filter(m.getCalculations(), Sizes.class);
      for(final Sizes c_1 : _filter_1) {
        _builder.append("\t\t");
        _builder.append("<div class=\"panel panel-success\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<div class=\"panel-heading\">Problem ");
        int _plusPlus_1 = i++;
        _builder.append(_plusPlus_1, "\t\t\t");
        _builder.append("</div>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<div class=\"panel-body\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<div class=\"well\">A program with a ");
        String _complexity_1 = c_1.getComplexity();
        _builder.append(_complexity_1, "\t\t\t");
        _builder.append(" solves a problem of size ");
        int _size1_4 = c_1.getSize1();
        _builder.append(_size1_4, "\t\t\t");
        _builder.append(" in ");
        int _time1_2 = c_1.getTime1();
        _builder.append(_time1_2, "\t\t\t");
        _builder.append(" ");
        TimeUnits _time1Unit_1 = c_1.getTime1Unit();
        _builder.append(_time1Unit_1, "\t\t\t");
        _builder.append(". How would be the size of the problem to solve with a time of ");
        int _time2 = c_1.getTime2();
        _builder.append(_time2, "\t\t\t");
        _builder.append(" ");
        TimeUnits _time2Unit = c_1.getTime2Unit();
        _builder.append(_time2Unit, "\t\t\t");
        _builder.append("?</div>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<p class=\"text-info\">Solution</p>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<div class=\"alert alert-info\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<p>If for $ f(n_1)$ it takes $t_1$ and for $f(n_2)$ it takes $t_2 \\to f(n_2) = { t_2 \\over t_1 } \\times f(n_1)$</p>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        c_1.setTime2(Double.valueOf(Utils.matchUnits(c_1.getTime2(), c_1.getTime2Unit(), c_1.getTime1Unit())).intValue());
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        c_1.setTime2Unit(c_1.getTime1Unit());
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<p>$ t_1 = ");
        int _time1_3 = c_1.getTime1();
        _builder.append(_time1_3, "\t\t\t");
        _builder.append("; n_1 = ");
        int _size1_5 = c_1.getSize1();
        _builder.append(_size1_5, "\t\t\t");
        _builder.append("; t_2 = ");
        int _time2_1 = c_1.getTime2();
        _builder.append(_time2_1, "\t\t\t");
        _builder.append("; n_2 = ? $</p>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<p>$ t_2 = k \\times t_1 \\to k = { t_2 \\over t_1 } = { ");
        int _time2_2 = c_1.getTime2();
        _builder.append(_time2_2, "\t\t\t");
        _builder.append(" \\over ");
        int _time1_4 = c_1.getTime1();
        _builder.append(_time1_4, "\t\t\t");
        _builder.append(" } = ");
        int _time2_3 = c_1.getTime2();
        int _time1_5 = c_1.getTime1();
        int _divide_1 = (_time2_3 / _time1_5);
        _builder.append(_divide_1, "\t\t\t");
        _builder.append(" $</p>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        CharSequence _solveSizes = WebGeneratorSolverSizes.solveSizes(c_1);
        _builder.append(_solveSizes, "\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("</div>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("</div>");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
}
