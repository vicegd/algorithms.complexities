/**
 * generated by Xtext 2.12.0
 */
package algorithms.complexities.ui.wizard;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.resource.FileExtensionProvider;

@SuppressWarnings("all")
public class ComplexitiesNewProjectWizardInitialContents {
  @Inject
  private FileExtensionProvider fileExtensionProvider;
  
  public void generateInitialContents(final IFileSystemAccess2 fsa) {
    String _primaryFileExtension = this.fileExtensionProvider.getPrimaryFileExtension();
    String _plus = ("src/model/Model." + _primaryFileExtension);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append("* This is an example model");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("calculations  ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with a complexity O(3) if time = 3600 seconds for size = 10 calculate time in hours for size = 20           ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with a complexity O(n) if time = 10 seconds for size = 10 calculate time in seconds for size = 30 ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with a complexity O(n^3) if time = 10 seconds for size = 10 calculate time in seconds for size = 20 ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with a complexity O(logn) if time = 10 seconds for size = 8 calculate time in seconds for size = 64 ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with a complexity O(nlogn) if time = 10 seconds for size = 8 calculate time in seconds for size = 64 ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with a complexity O(n^3log^4 n) if time = 4 seconds for size = 2 calculate time in seconds for size = 4 ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with a complexity O(2^n) if time = 4 seconds for size = 4 calculate time in seconds for size =  8                         ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with a complexity O(n!) if time = 10 seconds for size = 1 calculate time in seconds for size =  4                      ");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with a complexity O(5) if size = 10 for time = 100 seconds calculate size with time = 200 seconds  ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with a complexity O(n) if size = 10 for time = 100 seconds calculate size with time = 200 seconds");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with a complexity O(n^2) if size = 100 for time = 4 seconds calculate size with time = 16 seconds  ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with a complexity O(logn) if size = 8 for time = 2 seconds calculate size with time = 4 seconds        ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with a complexity O(2^n) if size = 20 for time = 8 seconds calculate size with time = 16 seconds  ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with a complexity O(n!) if size = 20 for time = 8 seconds calculate size with time = 16 seconds   ");
    _builder.newLine();
    fsa.generateFile(_plus, _builder);
  }
}
